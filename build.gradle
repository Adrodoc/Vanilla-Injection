apply plugin: 'eclipse'
buildscript {
  repositories { jcenter() }
  dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0' }
}
apply plugin: 'com.github.ben-manes.versions'

task wrapper (type: Wrapper) { gradleVersion = '4.3' }

ext.encoding = 'UTF-8'
allprojects {
  group = 'com.energyxxer.inject'
  version = getGitVersion()
}

String getGitVersion() {
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--dirty=-SNAPSHOT'
      standardOutput = stdout
    }
    return stdout.toString().trim().substring(1)
  } catch (Exception e) {
    return "UNKNOWN-VERSION"
  }
}

// ----------------------------------------------------------------------------------------------------
//    _      _  _                        _
//   | |    (_)| |__   _ __  __ _  _ __ (_)  ___  ___
//   | |    | || '_ \ | '__|/ _` || '__|| | / _ \/ __|
//   | |___ | || |_) || |  | (_| || |   | ||  __/\__ \
//   |_____||_||_.__/ |_|   \__,_||_|   |_| \___||___/
//
// ----------------------------------------------------------------------------------------------------

ext.libs = [
  guava:          'com.google.guava:guava:23.0',
  jsr305:         'com.google.code.findbugs:jsr305:3.0.2',
  nbt:            'com.evilco.mc:nbt:1.0.2',
  log4j_api:      'org.apache.logging.log4j:log4j-api:2.9.1',
  log4j_core:     'org.apache.logging.log4j:log4j-core:2.9.1'
]

// ----------------------------------------------------------------------------------------------------

allprojects {
  repositories {
    mavenCentral()
    maven { url 'http://basket.cindyscats.com/content/repositories/releases' }
  }

  apply from: rootProject.file('gradle-snippets/project/add-use-snippet.gradle')
  useSnippet 'use-encoding-in-compiler'
  useSnippet 'log-unit-tests'

  pluginManager.withPlugin('eclipse') { useSnippet 'eclipse/configure-eclipse' }

  pluginManager.withPlugin('java') {
    jar {

      // ----------------------------------------------------------------------------------------------------
      //    __  __                _   __             _
      //   |  \/  |  __ _  _ __  (_) / _|  ___  ___ | |_
      //   | |\/| | / _` || '_ \ | || |_  / _ \/ __|| __|
      //   | |  | || (_| || | | || ||  _||  __/\__ \| |_
      //   |_|  |_| \__,_||_| |_||_||_|   \___||___/ \__|
      //
      // ----------------------------------------------------------------------------------------------------

      manifest {
        attributes(
            'Specification-Title':      archivesBaseName,
            'Specification-Version':    version,
            'Implementation-Title':     archivesBaseName,
            'Implementation-Version':   version
            )
        pluginManager.withPlugin('application') {
          afterEvaluate {
            if (!attributes.containsKey('Main-Class') && mainClassName != null){
              attributes('Main-Class': mainClassName)
            }
          }
        }
      }
    }
  }

  // ----------------------------------------------------------------------------------------------------
  //       _                   _  _              _    _
  //      / \    _ __   _ __  | |(_)  ___  __ _ | |_ (_)  ___   _ __
  //     / _ \  | '_ \ | '_ \ | || | / __|/ _` || __|| | / _ \ | '_ \
  //    / ___ \ | |_) || |_) || || || (__| (_| || |_ | || (_) || | | |
  //   /_/   \_\| .__/ | .__/ |_||_| \___|\__,_| \__||_| \___/ |_| |_|
  //            |_|    |_|
  // ----------------------------------------------------------------------------------------------------

  pluginManager.withPlugin('application') {
    dependencies { compile project(':jarloader') }

    task prepareJar {
      doLast {
        jar {
          configurations.runtime.each { File file ->
            if (file == project(':jarloader').jar.archivePath) {
              from zipTree(file)
            } else {
              from(file) { into '/lib' }
            }
          }
        }
      }
    }
    jar.dependsOn prepareJar
  }
}

subprojects { useSnippet 'set-archivesBaseName-to-project-path' }
